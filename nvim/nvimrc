if $SHELL =~ 'bin/fish'
    set shell=/bin/sh
endif

set nocompatible
let g:ale_completion_enabled = 1

call plug#begin('~/.nvim/plugged')
Plug 'airblade/vim-gitgutter'
Plug 'cespare/vim-toml'
Plug 'chiedo/vim-case-convert'
Plug 'chriskempson/base16-vim'
Plug 'ecomba/vim-ruby-refactoring'
Plug 'editorconfig/editorconfig-vim'
Plug 'eliba2/vim-node-inspect'
Plug 'elixir-editors/vim-elixir'
Plug 'elzr/vim-json'
Plug 'fatih/vim-go'
Plug 'jparise/vim-graphql'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/gv.vim'
Plug 'junegunn/vim-easy-align'
Plug 'kassio/neoterm'
Plug 'leafgarland/typescript-vim'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'noprompt/vim-yardoc'
Plug 'pangloss/vim-javascript'
Plug 'pearofducks/ansible-vim'
Plug 'pocke/whichpr'
Plug 'ruby-formatter/rufo-vim'
Plug 'scrooloose/nerdtree'
Plug 'shime/vim-livedown'
Plug 'slim-template/vim-slim'
Plug 'tmhedberg/matchit'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rhubarb'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-erlang/vim-erlang-compiler'
Plug 'vim-erlang/vim-erlang-omnicomplete'
Plug 'vim-erlang/vim-erlang-runtime'
Plug 'w0rp/ale'
Plug 'wakatime/vim-wakatime'
call plug#end()

let $NVIM_TUI_ENABLE_TRUE_COLOR=1

set encoding=utf8
set regexpengine=1
set nobackup
set nowb
set noswapfile
set vb
syntax enable
set t_Co=256
set background=dark

let base16colorspace=256
" colorscheme Tomorrow-Night
colorscheme base16-default-dark

runtime macros/matchit.vim

highlight yardGenericTag cterm=bold
highlight yardAttribute cterm=bold

try
    set undodir=~/.vim/undodir
        set undofile
    catch
endtry
set hidden
set cf
set history=256
set nu
set nowrap
set timeoutlen=250
set nocursorline
set tabstop=2
set shiftwidth=2
set expandtab
set smarttab
" set cindent
set autoindent
set bs=2
set nocp incsearch
set colorcolumn=80,120
set formatoptions=tcqr
set backspace=indent,eol,start
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
set mat=5
set list listchars=tab:»·,trail:·
set cmdheight=1
set noshowmode
set laststatus=2
set completeopt-=preview
set mousehide
set mouse=a
set tags=.tags;
set inccommand=nosplit

filetype plugin on

if has('conceal')
  set conceallevel=2 concealcursor=i
endif

function! SaveProper()
    let current_filetype = &filetype
    if (index(s:tab_sensitive_filetypes, current_filetype) < 0)
        :%s/\s\+$//e " delete trailing whitespace
        :set et| retab " change indent to spaces and retab
    endif
    :set ff=unix " set line endings to unix
    :update " write to disk
endfunction

function! GitSearch()
    let query = input('Search for: ')
    :call GitSearchForWord(query)
endfunction

function! GitSearchForWord(query)
    if !empty(a:query)
        execute ":Ag " . a:query
    endif
endfunction

" Use bc to evaluate arithmetic expressions
function! CalculateExpression(expr)
    if !empty(a:expr)
        return system("echo 'print " . a:expr . "' | bc -l")
    endif
endfunction

function! GetVisual() range
    let reg_save = getreg('"')
    let regtype_save = getregtype('"')
    let cb_save = &clipboard
    set clipboard&
    normal! ""gvy
    let selection = getreg('"')
    call setreg('"', reg_save, regtype_save)
    let &clipboard = cb_save
    return selection
endfunction

function! SumLines() range
  let sum = eval(join(getline(a:firstline,a:lastline),'+'))

  call cursor(a:lastline, 1)
  execute "normal! o" . sum . "\<Esc>"
endfunction

:command! -range=% Sum <line1>,<line2>call SumLines()<CR>

function! FormatJsonFunction()
    :%!python -m json.tool
endfunction

:command! FormatJson :call FormatJsonFunction()<CR>

function! CopyMatches()
    let hits = []
    %s//\=len(add(hits, submatch(0))) ? submatch(0) : ''/ge
    let reg = '"'
    execute 'let @'.reg.' = join(hits, "\n") . "\n"'
endfunction

:command! YankMatches :call CopyMatches()<CR>

function! PrintCurrentFilename()
  execute "normal! i" . expand("%") . "\<Esc>"
endfunction

:command! CurrentFilename :call PrintCurrentFilename()<CR>

if executable('clipboard-provider')
    " checkout https://github.com/agriffis/skel/blob/master/neovim/bin/clipboard-provider
    let g:clipboard = {
          \ 'name': 'myClipboard',
          \     'copy': {
          \         '+': 'clipboard-provider copy',
          \     },
          \     'paste': {
          \         '+': 'clipboard-provider paste',
          \     },
          \ }
endif

augroup vimrc_autocmd
    autocmd!
    autocmd BufRead,BufNewFile *.js.erb set filetype=javascript
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType php setlocal omnifunc=javascriptcomplete#CompletePHP
    "autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
    "autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
    "autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
    "autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
    autocmd FileType ruby setlocal re=1 foldmethod=manual
    autocmd FileType make set noexpandtab
    autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|XXX\|BUG\|HACK\)')
    au BufNewFile,BufRead Jenkinsfile setf groovy
    " autocmd! BufWritePost * Neomake
augroup END
let s:tab_sensitive_filetypes = ['make', 'go']

set wildignore+=*.psd,*.doc,*.docx,*.xlsx
set wildignore+=*/vendor/**
set wildignore+=*/node_modules/**
set wildignore+=*/bower_components/**

let mapleader = ","
" free up control-q for tmux
noremap <C-q> <Nop>
inoremap jk <esc>
nnoremap <space>is :call GitSearch()<cr>
nnoremap <space>s :Ag <C-R><C-W><cr>
vnoremap <space>s :call GitSearchForWord(GetVisual())<CR>
nnoremap <silent> <C-s> :call SaveProper()<CR>
nnoremap <space> :noh<cr>
nnoremap <leader>n :NERDTreeToggle<cr>
nnoremap <leader>z :TlistToggle<cr>
nnoremap <leader>N :NERDTreeFind<cr>
" nnoremap <leader>s :silent! make<CR>
nnoremap <C-tab> :bn<CR>
nnoremap <C-S-tab> :bp<CR>
inoremap <C-tab> <Esc>:bn<CR>i
inoremap <C-S-tab> <Esc>:bp<CR>i
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
tnoremap <C-j> <c-\><c-n><c-w>j
tnoremap <C-k> <c-\><c-n><c-w>k
tnoremap <C-h> <c-\><c-n><c-w>h
tnoremap <C-l> <c-\><c-n><c-w>l
au WinEnter *pid:* call feedkeys('i')
"highlight last inserted text
nmap gV `[v`]
" close current buffer without closing the window
nnoremap <leader>x :bp<bar>sp<bar>bn<bar>bd<CR>
nnoremap <leader>c :clo<CR> " close current window
nnoremap <leader>v :vs<CR> " vertical split
nnoremap <leader>h :vertical resize -5<cr>
nnoremap <leader>l :vertical resize +5<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gc :GCommit<cr>
nnoremap <leader>gp :Gpush<cr>
nnoremap <leader>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <leader>gb :Git blame<cr>
" open the GitHub PR in which the line under cursor was last modified
function! OpenPRForLine() abort
  let line = line('.')
  let fname = expand('%')
  let cmd = printf('git blame -L %d,%d %s | cut -d " " -f 1', line, line, fname)
  let sha1 = system(cmd)
  " echo sha1
  let cmd = printf('whichpr open %s', sha1)
  echo system(cmd)
endfunction

nnoremap <leader>pr :call OpenPRForLine()<cr>
" open file in github
nnoremap <leader>o :GBrowse!<cr>
vnoremap <leader>o :GBrowse<cr>
imap <c-l> <space>=><space>
imap <c-b> ->
imap <C-c> <CR><Esc>O
imap <C-e> <Esc>A
nnoremap Q :qa<CR>
noremap q: <nop>
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
nnoremap <C-P> :GFiles .<CR>
noremap <C-A> :Buffers<CR>
" nnoremap <Leader>f :<C-U>tjump <Plug><cword><CR>
noremap <Leader>f g<C-]>
vnoremap // y/<C-R>"<CR>

" terminal keybinds
let g:neoterm_default_mod='belowright'

let g:neoterm_shell='fish'
" let g:neoterm_default_mod = 'horizontal'
let g:neoterm_keep_term_open = 0
let g:neoterm_autoinsert = 1

nnoremap <silent> <Leader>t  :Tnew<cr>
" run the currently opened file in rspec
nnoremap <silent> <Leader>r  :T lspec %<cr>
" nnoremap <silent> <Leader>e :TREPLSendLine<cr>
" vnoremap <silent> <Leader>e :TREPLSendSelection<cr>
" nnoremap <silent> ,th :call neoterm#close()<cr>

" use for arithmetic expressions, selection will be replaced with it's value
vnoremap <space>e :s/\%V.*/\=CalculateExpression(submatch(0))/<CR>:noh<CR>

let g:ale_set_highlights = 0
let g:ale_linters_explicit = 1 " run only the linters defined explictly below
let g:ale_ruby_rubocop_executable = 'bundle'
let g:ale_linters = {
\   'ruby': ['rubocop'],
\   'javascript': ['eslint'],
\}

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

let NERDTreeShowHidden=1

let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_powerline_fonts = 0
let g:airline_theme='base16'
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#default#section_truncate_width = {
      \ 'b': 99,
      \ 'x': 60,
      \ 'y': 88,
      \ 'z': 45,
      \ 'warning': 80,
      \ 'error': 80,
      \ }

let g:mta_filetypes = { 'html' : 1, 'xhtml' : 1, 'xml' : 1, 'jinja' : 1, 'eruby' : 1, 'twig' : 1, 'erb'  : 1, }

let g:vim_json_syntax_conceal = 0
let g:livedown_autorun = 1

let g:gitgutter_git_executable='/usr/bin/git'
