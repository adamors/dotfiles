if $SHELL =~ 'bin/fish'
    set shell=/bin/sh
endif
set nocompatible

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-fugitive'
Plug 'kien/ctrlp.vim'
Plug 'bling/vim-airline'
Plug 'ap/vim-buftabline'
Plug 'scrooloose/nerdtree'
Plug 'Shougo/neocomplete.vim'
Plug 'mattn/webapi-vim'
Plug 'mattn/emmet-vim'
Plug 'scrooloose/syntastic'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'Valloric/MatchTagAlways'
Plug 'othree/html5-syntax.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-rails'
Plug 'jelera/vim-javascript-syntax'
Plug 'pangloss/vim-javascript'
Plug 'Raimondi/delimitMate'
Plug 'editorconfig/editorconfig-vim'
Plug 'rking/ag.vim'
Plug 'vim-scripts/taglist.vim'
Plug 'junegunn/vim-easy-align'
Plug 'hesselbom/vim-hsftp'
call plug#end()

"Bundle 'docteurklein/php-getter-setter.vim'
"Bundle 'sumpygump/php-documentor-vim'
"Bundle 'godlygeek/tabular'
"Bundle 'evidens/vim-twig'
"Bundle 'arnaud-lb/vim-php-namespace'
"Bundle 'xsbeats/vim-blade'
"Bundle 'groenewege/vim-less'

set encoding=utf8
set nobackup
set nowb
set noswapfile
set vb
syntax enable
set t_Co=256
set background=dark
colorscheme Tomorrow-Night
try
    set undodir=~/.vim/undodir
        set undofile
    catch
endtry
set hidden
set cf
set history=256
set nu
set nowrap
set timeoutlen=250
set cursorline
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set cindent
set autoindent
set bs=2
set nocp incsearch
set colorcolumn=80
set formatoptions=tcqr
set backspace=indent,eol,start
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
set mat=5
set list listchars=tab:»·,trail:·
set cmdheight=1
set noshowmode
set laststatus=2
set completeopt-=preview
set mouse=a
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

function! SaveProper()
    let current_filetype = &filetype
    if (index(s:tab_sensitive_filetypes, current_filetype) < 0)
        :%s/\s\+$//e " delete trailing whitespace
        :set et| retab " change indent to spaces and retab
    endif
    :set ff=unix " set line endings to unix
    :update " write to disk
endfunction

function! GitSearch()
    let query = input('Search for: ')
    if !empty(query)
        execute ":Ag " . query
    endif
endfunction

function! FormatJson()
    :%!python -m json.tool
endfunction

:command FormatJson :call FormatJson()<CR>

autocmd FileType css,scss,less setlocal tabstop=2
autocmd FileType css,scss,less setlocal shiftwidth=2
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType html,markdown,yaml setlocal tabstop=2
autocmd FileType html,markdown,yaml setlocal shiftwidth=2
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType php setlocal omnifunc=javascriptcomplete#CompletePHP
autocmd FileType ruby,eruby setlocal tabstop=2
autocmd FileType ruby,eruby setlocal shiftwidth=2
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
augroup filetype
  au! BufRead,BufNewFile,BufEnter *Makefile*,*makefile*,*.mk set filetype=make
augroup END
autocmd FileType make set noexpandtab
autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|XXX\|BUG\|HACK\)')
let s:tab_sensitive_filetypes = ['make']

set wildignore+=*.psd,*.doc,*.docx,*.xlsx
set wildignore+=*/vendor/**
set wildignore+=*/node_modules/**
set wildignore+=*/bower_components/**

let mapleader = ","
inoremap jk <esc>
nnoremap <space>s :call GitSearch()<cr>
nnoremap <silent> <C-s> :call SaveProper()<CR>
nnoremap <space> 10jzz
nnoremap <leader>n :NERDTreeToggle<cr>
nnoremap <leader>z :TlistToggle<cr>
nnoremap <leader>N :NERDTreeFind<cr>
nnoremap <C-tab> :bn<CR>
nnoremap <C-S-tab> :bp<CR>
inoremap <C-tab> <Esc>:bn<CR>i
inoremap <C-S-tab> <Esc>:bp<CR>i
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
au WinEnter *pid:* call feedkeys('i')
nmap gV `[v`] "highlight last inserted text
nnoremap <leader>x :bp<bar>sp<bar>bn<bar>bd<CR> " close current buffer without closing the window
nnoremap <leader>c :clo<CR> " close current window
nnoremap <leader>v :vs<CR> " vertical split
nnoremap <leader>h :vertical resize -5<cr>
nnoremap <leader>l :vertical resize +5<cr>
imap <c-l> <space>=><space>
imap <c-b> ->
imap <C-c> <CR><Esc>O
imap <C-e> <Esc>A
nnoremap Q <nop>
noremap q: <nop>
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
noremap <C-A> :CtrlPBuffer<CR>
noremap <Leader>f g<C-]>
nnoremap <silent> <leader>s :Hupload<CR>
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#max_list = 10
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['html', 'twig', 'css', 'scss', ''] }
let g:user_emmet_leader_key = '<c-a>'
let g:user_emmet_settings = webapi#json#decode(join(readfile(expand('~/dotfiles/vim/vim/snippets_custom.json')), "\n"))
let g:used_javascript_libs = 'underscore,angularjs,jquery,requirejs'
let NERDTreeShowHidden=1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_powerline_fonts = 0
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:10'
let g:ctrlp_working_path_mode = 0
let g:mta_filetypes = { 'html' : 1, 'xhtml' : 1, 'xml' : 1, 'jinja' : 1, 'eruby' : 1, 'twig' : 1, 'erb'  : 1, }

" inoremap <Leader>u <C-O>:call PhpInsertUse()<CR>
" noremap <Leader>u :call PhpInsertUse()<CR>
" inoremap <Leader>e <C-O>:call PhpExpandClass()<CR>
" noremap <Leader>e :call PhpExpandClass()<CR>
" let g:phpcomplete_index_composer_command = 'composer'
" noremap <Leader>b :InsertBothGetterSetter<CR>
" noremap <Leader>g :InsertGetterOnly<CR>
" au BufRead,BufNewFile *.php nnoremap <buffer> <leader>d :call PhpDoc()<CR>
" noremap <Leader>t :!ctags -f tags --languages=PHP -R<cr>
